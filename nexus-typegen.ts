/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./api/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ElementInputType: { // input type
    id: number; // Int!
  }
  OrganInputType: { // input type
    id: number; // Int!
  }
}

export interface NexusGenEnums {
  Taste: "BITTER" | "SALTY" | "SOUR" | "SPICY" | "SWEET"
  Temperament: "COLD" | "COOL" | "HOT" | "NEUTRAL" | "WARM"
  TimeOfDay: "AFTERNOON" | "EARLY_MORNING" | "EVENING" | "MID_DAY" | "MID_NIGHT" | "MORNING"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Element: { // root type
    color?: string | null; // String
    direction?: string | null; // String
    emotion?: string | null; // String
    environmentalFactor?: string | null; // String
    id: number; // Int!
    name?: string | null; // String
    season?: string | null; // String
    sound?: string | null; // String
    taste?: NexusGenEnums['Taste'] | null; // Taste
    time?: NexusGenEnums['TimeOfDay'] | null; // TimeOfDay
  }
  Herb: { // root type
    available?: boolean | null; // Boolean
    category?: string | null; // String
    dontUse?: Array<string | null> | null; // [String]
    enemies?: Array<string | null> | null; // [String]
    english?: string | null; // String
    folk?: Array<string | null> | null; // [String]
    id: number; // Int!
    images?: Array<string | null> | null; // [String]
    latin?: string | null; // String
    quality?: Array<string | null> | null; // [String]
    ro?: string | null; // String
    skills?: Array<string | null> | null; // [String]
    taste?: Array<NexusGenEnums['Taste'] | null> | null; // [Taste]
    tcm?: string | null; // String
    temperament?: NexusGenEnums['Temperament'] | null; // Temperament
  }
  Ingredient: { // root type
    id: number; // Int!
    isHerb?: boolean | null; // Boolean
    name?: string | null; // String
    quantity?: string | null; // String
    ratio?: string | null; // String
  }
  Mutation: {};
  Organ: { // root type
    id: number; // Int!
    partner?: string | null; // String
    senseOrgan?: string | null; // String
    tissue?: string | null; // String
    viscera?: string | null; // String
  }
  Potion: { // root type
    available?: boolean | null; // Boolean
    bestSeason?: string | null; // String
    id: number; // Int!
    methodDescription?: string | null; // String
    name?: string | null; // String
    potionType?: string | null; // String
    time?: string | null; // String
    use?: Array<string | null> | null; // [String]
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Element: { // field return type
    color: string | null; // String
    direction: string | null; // String
    emotion: string | null; // String
    environmentalFactor: string | null; // String
    id: number; // Int!
    name: string | null; // String
    organ: NexusGenRootTypes['Organ'] | null; // Organ
    season: string | null; // String
    sound: string | null; // String
    taste: NexusGenEnums['Taste'] | null; // Taste
    time: NexusGenEnums['TimeOfDay'] | null; // TimeOfDay
  }
  Herb: { // field return type
    available: boolean | null; // Boolean
    category: string | null; // String
    dontUse: Array<string | null> | null; // [String]
    enemies: Array<string | null> | null; // [String]
    english: string | null; // String
    folk: Array<string | null> | null; // [String]
    id: number; // Int!
    images: Array<string | null> | null; // [String]
    latin: string | null; // String
    potions: Array<NexusGenRootTypes['Potion'] | null> | null; // [Potion]
    quality: Array<string | null> | null; // [String]
    ro: string | null; // String
    skills: Array<string | null> | null; // [String]
    taste: Array<NexusGenEnums['Taste'] | null> | null; // [Taste]
    tcm: string | null; // String
    temperament: NexusGenEnums['Temperament'] | null; // Temperament
  }
  Ingredient: { // field return type
    id: number; // Int!
    isHerb: boolean | null; // Boolean
    name: string | null; // String
    potion: NexusGenRootTypes['Potion'] | null; // Potion
    quantity: string | null; // String
    ratio: string | null; // String
  }
  Mutation: { // field return type
    createElement: NexusGenRootTypes['Element']; // Element!
    createOrgan: NexusGenRootTypes['Organ']; // Organ!
    deleteElement: NexusGenRootTypes['Element'] | null; // Element
    deleteOrgan: NexusGenRootTypes['Organ'] | null; // Organ
    updateOrgan: NexusGenRootTypes['Organ'] | null; // Organ
  }
  Organ: { // field return type
    element: NexusGenRootTypes['Element'] | null; // Element
    id: number; // Int!
    partner: string | null; // String
    senseOrgan: string | null; // String
    tissue: string | null; // String
    viscera: string | null; // String
  }
  Potion: { // field return type
    available: boolean | null; // Boolean
    bestSeason: string | null; // String
    herbs: Array<NexusGenRootTypes['Herb'] | null> | null; // [Herb]
    id: number; // Int!
    ingredients: Array<NexusGenRootTypes['Ingredient'] | null> | null; // [Ingredient]
    methodDescription: string | null; // String
    name: string | null; // String
    potionType: string | null; // String
    time: string | null; // String
    use: Array<string | null> | null; // [String]
  }
  Query: { // field return type
    element: NexusGenRootTypes['Element'] | null; // Element
    elements: Array<NexusGenRootTypes['Element'] | null> | null; // [Element]
    organ: NexusGenRootTypes['Organ'] | null; // Organ
    organs: Array<NexusGenRootTypes['Organ'] | null> | null; // [Organ]
  }
}

export interface NexusGenFieldTypeNames {
  Element: { // field return type name
    color: 'String'
    direction: 'String'
    emotion: 'String'
    environmentalFactor: 'String'
    id: 'Int'
    name: 'String'
    organ: 'Organ'
    season: 'String'
    sound: 'String'
    taste: 'Taste'
    time: 'TimeOfDay'
  }
  Herb: { // field return type name
    available: 'Boolean'
    category: 'String'
    dontUse: 'String'
    enemies: 'String'
    english: 'String'
    folk: 'String'
    id: 'Int'
    images: 'String'
    latin: 'String'
    potions: 'Potion'
    quality: 'String'
    ro: 'String'
    skills: 'String'
    taste: 'Taste'
    tcm: 'String'
    temperament: 'Temperament'
  }
  Ingredient: { // field return type name
    id: 'Int'
    isHerb: 'Boolean'
    name: 'String'
    potion: 'Potion'
    quantity: 'String'
    ratio: 'String'
  }
  Mutation: { // field return type name
    createElement: 'Element'
    createOrgan: 'Organ'
    deleteElement: 'Element'
    deleteOrgan: 'Organ'
    updateOrgan: 'Organ'
  }
  Organ: { // field return type name
    element: 'Element'
    id: 'Int'
    partner: 'String'
    senseOrgan: 'String'
    tissue: 'String'
    viscera: 'String'
  }
  Potion: { // field return type name
    available: 'Boolean'
    bestSeason: 'String'
    herbs: 'Herb'
    id: 'Int'
    ingredients: 'Ingredient'
    methodDescription: 'String'
    name: 'String'
    potionType: 'String'
    time: 'String'
    use: 'String'
  }
  Query: { // field return type name
    element: 'Element'
    elements: 'Element'
    organ: 'Organ'
    organs: 'Organ'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createElement: { // args
      color: string; // String!
      direction: string; // String!
      emotion: string; // String!
      environmentalFactor: string; // String!
      id?: number | null; // Int
      name: string; // String!
      organId?: number | null; // Int
      season: string; // String!
      sound: string; // String!
      taste: NexusGenEnums['Taste']; // Taste!
      time: NexusGenEnums['TimeOfDay']; // TimeOfDay!
    }
    createOrgan: { // args
      id?: number | null; // Int
      partner: string; // String!
      senseOrgan: string; // String!
      tissue: string; // String!
      viscera: string; // String!
    }
    deleteElement: { // args
      id: number; // Int!
    }
    deleteOrgan: { // args
      id: number; // Int!
    }
    updateOrgan: { // args
      id: number; // Int!
      partner?: string | null; // String
      senseOrgan?: string | null; // String
      tissue?: string | null; // String
      viscera?: string | null; // String
    }
  }
  Query: {
    element: { // args
      organId: number; // Int!
    }
    organ: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}